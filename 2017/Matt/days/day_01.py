
class Day01:
    sequence = '82393664534558127269567731851345949183464112984439374267255354443912631439984677323484553559335534893' \
            '14994961848395821188176891719486358644278522153254214337174589757713695221387662482259632421686589753263' \
            '54785415252974294317138511141826226866364555761117178764543435899886711426319675443679829181257496966219' \
            '43583162156551966798989872583663962668164582171486144314189342767238471673276588484477243337479818595574' \
            '13111163658996598336342379388781813673172186355396673573642957547448295958429627735245842254279694674676' \
            '11641591834876769829719248136613147351298534885563144114336211961674392912181735773851634298227454157885' \
            '24176915681178761189734996533147421722346117689664324297539722785969655449299693723542327254934834952855' \
            '94322145215516569711368599722328541262623493812544245973488744477365457222619578712759357567641843789941' \
            '67427983811716675476257858556464755677478725146588747147857375293675711575747132471727933773512571368467' \
            '38615196656859896463133142886976215185363436235693575129812184928144212879651766348239122617425639551516' \
            '63615144426249441812559521245248152688641319691514338887212135952679273257595621327325862524384565695569' \
            '92685896517565257787464673718221817783929691626876446423134331749327322367571432532857235214364221471769' \
            '48166711811772932642955635757242133379851716899786315192728141823849179197539935739349475191315521986239' \
            '99596469934289218787981192156755488478454779948367449299189541597228271947215641215323154596114331573849' \
            '94543332773796862165243183378464731546787498174844781781139571984272235872866886275879944921329959736315' \
            '29673398131364395657695685176214927552194917799198823652947537359521766511243472774423578985285276567518' \
            '93427536953772193747915485547866714737331249519467795318474797553633632884482816221837365454943723447851' \
            '12312749694167483996738384351293899149136857728545977442763489799693492319549773328626918874718387697878' \
            '23574415449167792231751895268743965596247773455923275562494364496622797361778818221362189957939132439938' \
            '61464234272628744379925795738585891835718545778614597585343485335539251679471393518195117988299773712158' \
            '56637215221838924612644785498936263849489519896548811254628976642391428413984281758771868781714266261781' \
            '359762798'

    length = len(sequence)
    half = int(length / 2)

    def __init__(self):
        self.match_sum = 0

    def part_1(self):
        previous = int(self.sequence[self.length - 1])
        for digit in range(self.length):
            current = int(self.sequence[digit])
            if current == previous:
                self.match_sum += current
            previous = current
        print(self.match_sum)

    def part_2(self):
        for digit in range(self.length):
            current = int(self.sequence[digit])
            far_side = int(self.sequence[(digit + self.half) % self.length])
            if current == far_side:
                self.match_sum += current
        print(self.match_sum)
